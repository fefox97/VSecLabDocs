# FORMAL GRAPHS

@article{jonesIntroductionGraphBasedModeling1991,
  title = {An {{Introduction}} to {{Graph-Based Modeling Systems}}, {{Part II}}: {{Graph-Grammars}} and the {{Implementation}}},
  shorttitle = {An {{Introduction}} to {{Graph-Based Modeling Systems}}, {{Part II}}},
  author = {Jones, Christopher V.},
  year = {1991},
  month = aug,
  journal = {ORSA Journal on Computing},
  volume = {3},
  number = {3},
  pages = {180--206},
  publisher = {{Institute for Operations Research and the Management Sciences (INFORMS)}},
  issn = {0899-1499, 2326-3245},
  doi = {10.1287/ijoc.3.3.180},
  urldate = {2025-07-09},
  abstract = {Attributed graphs are a widely used paradigm for representing management science models. In Part I of the study, we presented an overview of the concept of a Graph-Based Modeling System (GBMS), which supports the construction of a variety of models as long as the models can be expressed as attributed graphs. The key concept underlying the research is graph-grammars, a formal technique to specify how to build graphs with desired properties. Graph-grammars, as shown in Part I, among other capabilities, facilitate the creation of direct manipulation, computer graphics interfaces for graph-based models. A brief overview of a prototype implementation to do so, Networks, was also provided. In this concluding part, the implementation and the core technology underlying the research---graph-grammars---will be presented in detail.  INFORMS Journal on Computing, ISSN 1091-9856, was published as ORSA Journal on Computing from 1989 to 1995 under ISSN 0899-1499.},
  langid = {english},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/4WWPKC8N/Jones - 1991 - An Introduction to Graph-Based Modeling Systems, Part II Graph-Grammars and the Implementation.pdf}
}

@inproceedings{anglesPropertyGraphDatabase,
  title = {The Property Graph Database Model.},
  author = {Angles, Renzo},
  url = {https://renzoangles.net/wp/wp-content/uploads/2018/05/amw2018.pdf},
  urldate = {2025-07-30},

}

@article{anglesSurveyGraphDatabase2008,
  title = {Survey of Graph Database Models},
  author = {Angles, Renzo and Gutierrez, Claudio},
  date = {2008-02},
  journaltitle = {ACM Computing Surveys},
  shortjournal = {ACM Comput. Surv.},
  volume = {40},
  number = {1},
  pages = {1--39},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/1322432.1322433},
  abstract = {Graph database models can be defined as those in which data structures for the schema and instances are modeled as graphs or generalizations of them, and data manipulation is expressed by graph-oriented operations and type constructors. These models took off in the eighties and early nineties alongside object-oriented models. Their influence gradually died out with the emergence of other database models, in particular geographical, spatial, semistructured, and XML. Recently, the need to manage information with graph-like nature has reestablished the relevance of this area. The main objective of this survey is to present the work that has been conducted in the area of graph database modeling, concentrating on data structures, query languages, and integrity constraints.},
  langid = {english},
  file = {/Users/fefox/Zotero/storage/EWBYVHZX/Angles e Gutierrez - 2008 - Survey of graph database models.pdf}
}

@online{bellomariniModelIndependentDesignKnowledge2023,
  title = {Model-{{Independent Design}} of {{Knowledge Graphs}}},
  author = {Bellomarini, Luigi and Gentili, Andrea and Laurenza, Eleonora and Sallinger, Emanuel},
  namea = {{TU Wien}},
  nameatype = {collaborator},
  date = {2023-06-02},
  eprinttype = {TU Wien},
  doi = {10.34726/5426},
  url = {https://repositum.tuwien.at/handle/20.500.12708/193568},
  urldate = {2025-07-30},
  abstract = {Knowledge Graphs (KGs) can be seen as knowledge bases combining an extensional component, a database of facts, typically a property graph, and an intensional component, a formal specification of the available business experience, to derive new knowledge from those facts, often as new nodes and edges. Capitalizing on our experience in KGs and model management for the rollout of financial KGs for the Central Bank of Italy, in this work we present KGModel, a model-independent design framework for KGs. The framework adopts a meta-level approach: the data engineer visually designs the extensional component of the KG at a conceptual level and augments it with intensional specifications in MetaLog, a new logical model-independent language. This high-level specification of the KG is then translated into enforceable schema definitions for the target database and executable logical rules for a target reasoner. Our framework offers (i) a model-independent visual modeling language; (ii) MetaLog, a new language of the Datalog+/- family for the intensional component; (iii) new complementary software tools for the translation of meta-level specifications into their executable versions. We present the main ideas behind KGModel and show the suitability of the framework for real-world scenarios. This work is a short version of an EDBT 2022 paper.},
  langid = {english},
  pubstate = {prepublished},
  keywords = {conceptual design,Data modeling,Datalog,Features,Knowledge Graph,logical rules,MetaLog,Model-Independent,notion,real-world scenarios,schema and data translation,specific nodes,Stakeholders,Suitability},
  file = {/Users/fefox/Zotero/storage/GFQH94DZ/Bellomarini et al. - 2023 - Model-Independent Design of Knowledge Graphs.pdf}
}


# SYSTEM MODELING

# UMLSec

@incollection{jurjensUMLsecExtendingUML2002,
  title = {{{UMLsec}}: {{Extending UML}} for {{Secure Systems Development}}},
  shorttitle = {{{UMLsec}}},
  booktitle = {"{{UML}}" 2002 — {{The Unified Modeling Language}}},
  author = {Jürjens, Jan},
  editor = {Jézéquel, Jean-Marc and Hussmann, Heinrich and Cook, Stephen},
  editora = {Goos, Gerhard and Hartmanis, Juris and Van Leeuwen, Jan},
  editoratype = {redactor},
  date = {2002},
  volume = {2460},
  pages = {412--425},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/3-540-45800-X\_32},
  urldate = {2025-08-20},
  isbn = {978-3-540-44254-7 978-3-540-45800-5},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/RAUI8442/2002 - UMLsec Extending UML for Secure Systems Development.pdf}
}


# SecureUML

@incollection{lodderstedtSecureUMLUMLBasedModeling2002,
  title = {{{SecureUML}}: {{A UML-Based Modeling Language}} for {{Model-Driven Security}}},
  shorttitle = {{{SecureUML}}},
  booktitle = {Lecture {{Notes}} in {{Computer Science}}},
  author = {Lodderstedt, Torsten and Basin, David and Doser, Jürgen},
  date = {2002},
  pages = {426--441},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  issn = {0302-9743},
  doi = {10.1007/3-540-45800-x\_33},
  urldate = {2025-07-24},
  isbn = {978-3-540-44254-7 978-3-540-45800-5},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/ICQRNLGD/2002 - SecureUML A UML-Based Modeling Language for Model-Driven Security.pdf}
}


# SysML-Sec

@inproceedings{SysMLSecModelDriven2015,
  title = {{{SysML-Sec}} - {{A Model Driven Approach}} for {{Designing Safe}} and {{Secure Systems}}},
  booktitle = {Proceedings of the 3rd {{International Conference}} on {{Model-Driven Engineering}} and {{Software Development}}},
  author = {Apvrille, Ludovic and Roudier, Yves},
  date = {2015},
  pages = {655--664},
  publisher = {{SCITEPRESS - Science and and Technology Publications}},
  location = {ESEO, Angers, Loire Valley, France},
  doi = {10.5220/0005402006550664},
  urldate = {2025-07-28},
  abstract = {Security flaws are open doors to attack embedded systems and must be carefully assessed in order to determine threats to safety and security. Subsequently securing a system, that is, integrating security mechanisms into the system's architecture can itself impact the system's safety, for instance deadlines could be missed due to an increase in computations and communications latencies. SysML-Sec addresses these issues with a modeldriven approach that promotes the collaboration between system designers and security experts at all design and development stages, e.g., requirements, attacks, partitioning, design, and validation. A central point of SysML-Sec is its partitioning stage during which safety-related and security-related functions are explored jointly and iteratively with regards to requirements and attacks. Once partitioned, the system is designed in terms of system's functions and security mechanisms, and formally verified from both the safety and the security perspectives. Our paper illustrates the whole methodology with the evaluation of a security mechanism added to an existing automotive system. Copyright © 2015 SCITEPRESS - Science and Technology Publications.},
  eventtitle = {Special {{Session}} on {{Security}} and {{Privacy}} in {{Model Based Engineering}}},
  keywords = {Accident prevention,Automotive Systems,Design and Development,Embedded systems,Integrating security,Iterative methods,Model driven approach,Model-driven engineering,Model-driven Engineering,notion,Safety,Safety and securities,Safety engineering,Security,Software design,SysML}
}


# MAL

@article{cerovicStrideLangCreationDomainSpecific,
  title = {{{StrideLang}}: {{Creation}} of a {{Domain-Specific Threat Modeling Language}} Using {{STRIDE}}, {{DREAD}} and {{MAL}}},
  author = {Cerovic, Lazar},
  abstract = {Cybersecurity is still one of the main challenges of the digital era for organizations and individuals alike. Threat modeling is an important tool for building systems that are reliable and secure. The research question for this study is to create a domain specific language (DSL) with the Meta Attack Language (MAL), STRIDE and DREAD. One of the main challenges is to choose a DSL that is suitable for threat modeling. The purpose of the study is to provide people with threat modeling with additional tools that can be used in attack simulations. MAL is a meta language used for creating DSL that can be used for attack simulations. An example of a MAL project that usually serves as a template for other DSL is coreLang, which models the general IT infrastructure. STRIDE is a model used in threat modeling to enumerate and categorization of cyberthreats. DREAD is a model used for risk assessment that scores each threat by a value between one and ten. The proposed method for answering the research question is the Design Research Science Method (DRSM), which is often used for creating artifacts. Evaluation of the results is done with tests written in Java using the Junit framework. The result of the study is the creation of strideLang that maps attack steps in coreLang (MAL implementation of the general IT infrastructure DSL) to STRIDE and DREAD models. The primary source of error in the investigation is the risk assessment with DREAD, which can be somewhat inaccurate depending on what specific DSL is used. It would have been valuable if the study incorporated feedback from domain experts specifically with risk assessment. The nature of the STRIDE and DREAD models is that the models are very subjective in practice. However, this study does provide insights in how a DSL can be created based on DREAD and STRIDE. Future work might investigate a different DSL, incorporate tools such as SecuriCAD and compare different threat models.},
  langid = {english},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/IFRUQW5T/Cerovic - StrideLang Creation of a Domain-Specific Threat Modeling Language using STRIDE, DREAD and MAL.pdf}
}

@book{johnsonMetaLanguageThreat2018,
  title = {A {{Meta Language}} for {{Threat Modeling}} and {{Attack Simulations}}},
  author = {Johnson, Pontus and Robert, Lagerström and Ekstedt, Mathias},
  year = {2018},
  month = aug,
  pages = {8},
  doi = {10.1145/3230833.3232799},
  abstract = {Attack simulations may be used to assess the cyber security of systems. In such simulations, the steps taken by an attacker in order to compromise sensitive system assets are traced, and a time estimate may be computed from the initial step to the compromise of assets of interest. Attack graphs constitute a suitable formalism for the modeling of attack steps and their dependencies, allowing the subsequent simulation. To avoid the costly proposition of building new attack graphs for each system of a given type, domain-specific attack languages may be used. These languages codify the generic attack logic of the considered domain, thus facilitating the modeling, or instantiation, of a specific system in the domain. Examples of possible cyber security domains suitable for domain-specific attack languages are generic types such as cloud systems or embedded systems but may also be highly specialized kinds, e.g. Ubuntu installations; the objects of interest as well as the attack logic will differ significantly between such domains. In this paper, we present the Meta Attack Language (MAL), which may be used to design domain-specific attack languages such as the aforementioned. The MAL provides a formalism that allows the semi-automated generation as well as the efficient computation of very large attack graphs. We declare the formal background to MAL, define its syntax and semantics, exemplify its use with a small domain-specific language and instance model, and report on the computational performance.},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/M5DJJP7A/Johnson et al. - 2018 - A Meta Language for Threat Modeling and Attack Simulations.pdf}
}

@article{katsikeasVehicleLangProbabilisticModeling2022,
  title = {{{VehicleLang}}: {{A}} Probabilistic Modeling and Simulation Language for Modern Vehicle {{IT}} Infrastructures},
  shorttitle = {{{VehicleLang}}},
  author = {Katsikeas, Sotirios and Johnsson, Pontus and Hacks, Simon and Lagerstr{\"o}m, Robert},
  year = {2022},
  month = jun,
  journal = {Computers \& Security},
  volume = {117},
  pages = {102705},
  issn = {0167-4048},
  doi = {10.1016/j.cose.2022.102705},
  urldate = {2024-08-16},
  abstract = {Attack simulations are a feasible means of assessing the cyber security of various systems. Simulations can replicate the steps taken by an attacker to compromise sensitive system assets, and the time required for the acquisition of assets of interests can be calculated. One widely accepted approach to such simulations is the modelling of attack steps and their dependencies in a formal manner using attack graphs. To reduce the effort of creating new attack graphs for each system in a given domain, one can employ domain-specific attack-modeling languages to codify common attack logic. The Meta Attack Language has been proposed as a framework for developing domain-specific attack languages. In this article, we propose vehicleLang as a domain-specific language for modeling vehicles in the context of corresponding information technology infrastructures and analyzing weaknesses related to known attacks. To model domain-specific attributes, we reviewed existing literature to develop a comprehensive language, which was then verified through a series of interviews with domain experts from the automotive industry. Specifically, a systematic literature review was performed to identify possible attacks against vehicles. The identified attacks served as a blueprint for the evaluation of vehicleLang's simulation capabilities. Finally, the language was validated using the Feigenbaum test methodology.},
  keywords = {Attack graphs,Cyber security,Domain-specific language,notion,Threat modeling,Vehicular security},
  file = {/Users/fefox/Zotero/storage/L2PD2MAR/Katsikeas et al. - 2022 - VehicleLang A probabilistic modeling and simulation language for modern vehicle IT infrastructures.pdf}
}

# Archimate

@inproceedings{ellermModellingSecurityAspects2020,
  title = {Modelling {{Security Aspects}} with {{ArchiMate}}: {{A Systematic Mapping Study}}},
  shorttitle = {Modelling {{Security Aspects}} with {{ArchiMate}}},
  booktitle = {2020 46th {{Euromicro Conference}} on {{Software Engineering}} and {{Advanced Applications}} ({{SEAA}})},
  author = {Ellerm, Augustus and {Morales-Trujillo}, Miguel Ehecatl},
  year = {2020},
  month = aug,
  pages = {577--584},
  publisher = {IEEE},
  address = {Portoroz, Slovenia},
  doi = {10.1109/SEAA51224.2020.00094},
  urldate = {2025-07-29},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  isbn = {978-1-7281-9532-2},
  keywords = {notion}
}

@article{joseyIntroductionArchiMate302016,
  title = {An Introduction to the {{ArchiMate}}{\textregistered} 3.0 Specification},
  author = {Josey, Andrew and Lankhorst, Marc and Band, Iver and Jonkers, Henk and Quartel, Dick},
  year = {2016},
  journal = {White Paper from The Open Group},
  pages = {35},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/TFB9C2VU/Josey et al. - 2016 - An introduction to the ArchiMate® 3.0 specification.pdf}
}

# Microsoft TMT

@misc{MicrosoftTMT,
  author       = {{Microsoft Corporation}},
  title        = {Microsoft Threat Modeling Tool},
  year         = {2025},
  howpublished = {\url{https://learn.microsoft.com/en-us/azure/security/develop/threat-modeling-tool}},
  note         = {Microsoft Learn, accessed July 29, 2025}
}

# AADL

@inproceedings{caoAADLVulnerabilityModeling2019,
  title = {{{AADL Vulnerability Modeling}} and {{Security Analysis Method}}},
  booktitle = {2019 {{IEEE}} 19th {{International Conference}} on {{Software Quality}}, {{Reliability}} and {{Security Companion}} ({{QRS-C}})},
  author = {Cao, Yang and Dong, Yunwei and Wei, Xiaomin and Wu, Xiao},
  year = {2019},
  month = jul,
  pages = {399--406},
  publisher = {IEEE},
  address = {Sofia, Bulgaria},
  doi = {10.1109/QRS-C.2019.00080},
  urldate = {2025-07-29},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  isbn = {978-1-7281-3925-8},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/42UGDRK6/Cao et al. - 2019 - AADL Vulnerability Modeling and Security Analysis Method.pdf}
}

@techreport{gluchAADLSecurityAnnex2019,
  title = {{{AADL Security Annex}} [{{Draft}}]},
  author = {Gluch, Dave},
  year = {2019},
  keywords = {notion},
  file = {/Users/fefox/Zotero/storage/IJRSALJZ/Gluch - 2019 - AADL Security Annex [Draft].pdf}
}

# ADVISE

@inproceedings{kordiSecurityModelingChallenges2024,
  title = {Security {{Modeling Challenges}} and {{Research Directions Around}} the {{ADVISE Meta Framework}}},
  author = {Kordi, M. and Mariotti, F. and Lollini, P. and Bondavalli, A. and Ceccarelli, A. and Bondavalli, A. and Trapp, M. and Schoitsch, E. and Gallina, B. and Bitsch, F.},
  date = {2024},
  volume = {14989 LNCS},
  pages = {275--283-275--283},
  publisher = {{Springer Science and Business Media Deutschland GmbH}},
  doi = {10.1007/978-3-031-68738-9\_21},
  abstract = {In the contemporary cybersecurity world, effective security assessment methodologies are crucial to evaluate and enhance the security of systems, networks, applications, and data. Modeling and simulation can play a vital role by offering valuable representation and analysis of attacks and defense strategies in systems where the exploitation of threats can potentially lead to catastrophic consequences. The ADVISE Meta framework goes in this direction, providing an ontology-based approach that, starting from an architectural model of the system, allows to automatically generate detailed ADVISE security models which describe the attack steps that an adversary can follow to reach the goals. However, the framework has its drawbacks, such as a limited range of attacks and adversaries, and it solely considers the attacker’s viewpoint. In this work-in-progress paper, we continue the research direction started with previous works, where we proposed a methodology to extend the ontology of the ADVISE Meta framework with the attacks of the CAPEC database and the adversaries’ profiles of the TAL library. The focus is on discussing the current challenges around the ADVISE Meta framework and outlying the ongoing activities and research directions. © The Author(s), under exclusive license to Springer Nature Switzerland AG 2024.},
  keywords = {Assessment methodologies,CAPEC,ChatGPT,Cyber security,Cybersecurity,Meta-frameworks,Model transformation,SAN,Security assessment,Security modeling,TAL},
  file = {/Users/fefox/Zotero/storage/6EK5PARF/Kordi et al. - 2024 - Security Modeling Challenges and Research Directions Around the ADVISE Meta Framework.pdf}
}

@inproceedings{lemayModelbasedSecurityMetrics2011,
  title = {Model-Based Security Metrics Using {{ADversary VIew Security Evaluation}} ({{ADVISE}})},
  author = {LeMay, E. and Ford, M. D. and Keefe, K. and Sanders, W. H. and Muehrcke, C.},
  date = {2011},
  number = {6042046},
  pages = {191--200-191--200},
  doi = {10.1109/QEST.2011.34},
  abstract = {System architects need quantitative security metrics to make informed trade-off decisions involving system security. The security metrics need to provide insight on weak points in the system defense, considering characteristics of both the system and its adversaries. To provide such metrics, we formally define the ADversary View Security Evaluation (ADVISE) method. Our approach is to create an executable state-based security model of a system and an adversary that represents how the adversary is likely to attack the system and the results of such an attack. The attack decision function uses information about adversary attack preferences and possible attacks against the system to mimic how the adversary selects the most attractive next attack step. The adversary's decision involves looking ahead some number of attack steps. System architects can use ADVISE to compare the security strength of system architecture variants and analyze the threats posed by different adversaries. We demonstrate the feasibility and benefits of ADVISE using a case study. To produce quantitative model-based security metrics, we have implemented the ADVISE method in a tool that facilitates user input of system and adversary data and automatically generates executable models. © 2011 IEEE.},
  keywords = {Adversary Attack Decisions,Architecture,Decision functions,Executable model,Quantitative Security Metrics,Security evaluation,Security metrics,Security model,Security strengths,State-based,State-based Security Model,System architects,System architectures,System security,User input,Weak points},
  file = {/Users/fefox/Zotero/storage/XRZ7279B/scidb_1755043324552.pdf}
}
